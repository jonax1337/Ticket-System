// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPPORTER
}

// Removed enums - now using dynamic custom values

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  role      UserRole @default(SUPPORTER)
  avatarUrl String?  // URL to user's avatar image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedTickets Ticket[] @relation("AssignedTo")
  comments        Comment[]
  accounts        Account[]
  sessions        Session[]
  notifications   Notification[] @relation("UserNotifications")
  actorNotifications Notification[] @relation("ActorNotifications")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Ticket {
  id          String   @id @default(cuid())
  ticketNumber String? @unique // Generated ticket number (e.g., T-001234)
  subject     String
  description String   @db.Text
  htmlContent String?  @db.Text // Store original HTML content from emails
  status      String   @default("Open")
  priority    String   @default("Medium")
  fromEmail   String   // Keep for backward compatibility, but use participants for new logic
  fromName    String?  // Keep for backward compatibility
  assignedToId String?
  dueDate     DateTime? // Optional due date for tickets
  reminderDate DateTime? // Optional reminder date for tickets
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignedTo User?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  comments   Comment[]
  attachments TicketAttachment[]
  notifications Notification[]
  participants TicketParticipant[] // New modular participant system

  @@map("tickets")
}

model TicketParticipant {
  id        String   @id @default(cuid())
  ticketId  String
  email     String   // Email address of participant
  name      String?  // Display name (extracted from email or manually set)
  type      String   // "creator", "cc", "added_manually"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  // Ensure unique email per ticket
  @@unique([ticketId, email])
  @@map("ticket_participants")
}

model Comment {
  id       String   @id @default(cuid())
  content  String   @db.Text
  fullEmailContent String? @db.Text // Full email content including history for email replies
  sentToEmails String? @db.Text // Comma-separated list of emails this external comment was sent to
  type     String   @default("internal") // 'internal' oder 'external'
  ticketId String
  userId   String?  // Optional for external users who reply via email
  fromName String?  // Name of external user for email replies
  fromEmail String? // Email of external user for email replies
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id])
  attachments CommentAttachment[]
  notifications Notification[]

  @@map("comments")
}

model CommentAttachment {
  id        String   @id @default(cuid())
  filename  String   // Original filename
  filepath  String   // Path to file in uploads directory
  mimetype  String   // MIME type of the file
  size      Int      // File size in bytes
  commentId String
  createdAt DateTime @default(now())

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("comment_attachments")
}

model TicketAttachment {
  id        String   @id @default(cuid())
  filename  String   // Original filename
  filepath  String   // Path to file in uploads directory
  mimetype  String   // MIME type of the file
  size      Int      // File size in bytes
  ticketId  String
  createdAt DateTime @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_attachments")
}

model SetupStatus {
  id          String  @id @default("setup")
  isCompleted Boolean @default(false)
  completedAt DateTime?

  @@map("setup_status")
}

model SystemSettings {
  id          String @id @default("system")
  appName     String @default("Support Dashboard")
  slogan      String? // Optional slogan/subtitle
  logoUrl     String? // Optional logo URL
  hideAppName Boolean @default(false) // Hide app name when logo is present
  themeColor  String @default("default") // default, blue, amber, green, red, etc.
  ticketPrefix String @default("T") // Prefix for ticket numbers
  ticketNumberType String @default("sequential") // "sequential" or "random"
  ticketNumberLength Int @default(6) // Length of the number part
  lastTicketNumber Int @default(0) // For sequential numbering
  
  // Automation settings
  automationEnabled Boolean @default(true) // Enable/disable ticket automation
  automationWarningDays Int @default(7) // Days before auto-close warning
  automationCloseDays Int @default(14) // Days of inactivity before auto-close
  automationCheckInterval Int @default(60) // Check interval in minutes
  
  // Email template settings
  emailSubjectPrefix String @default("[Ticket {{ticketNumber}}]") // Prefix for email subjects
  emailBaseTemplate String? @db.Text // Base HTML template for emails
  emailBaseTemplateActive Boolean @default(true) // Enable/disable base template
  emailShowLogo Boolean @default(true) // Show logo in emails (if logoUrl is set)
  emailHideAppName Boolean @default(false) // Hide app name in emails
  emailHideSlogan Boolean @default(false) // Hide slogan in emails
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model CustomStatus {
  id        String   @id @default(cuid())
  name      String   @unique
  icon      String   // Lucide icon name
  color     String   // CSS color class
  order     Int      // Display order
  isDefault Boolean  @default(false) // Mark default system statuses
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("custom_statuses")
}

model CustomPriority {
  id        String   @id @default(cuid())
  name      String   @unique
  icon      String   // Lucide icon name
  color     String   // CSS color class
  order     Int      // Display order
  isDefault Boolean  @default(false) // Mark default system priorities
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("custom_priorities")
}

model EmailConfiguration {
  id          String   @id @default(cuid())
  name        String   // Display name for the email account
  host        String   // IMAP server host
  port        Int      @default(993) // IMAP port (993 for SSL, 143 for non-SSL)
  username    String   // IMAP username/email
  password    String   // Encrypted IMAP password
  useSSL      Boolean  @default(true) // Use SSL/TLS
  folder      String   @default("INBOX") // IMAP folder to monitor
  isActive    Boolean  @default(true) // Enable/disable this email account
  isOutbound  Boolean  @default(false) // Use this account for outbound emails
  lastSync    DateTime? // Last successful sync timestamp
  syncInterval Int     @default(300) // Sync interval in seconds (5 minutes default)
  
  // Email processing actions
  emailAction String   @default("mark_read") // "mark_read", "delete", "move_to_folder"
  moveToFolder String? // Target folder when action is "move_to_folder"
  
  // Filters
  processOnlyUnread Boolean @default(true) // Only process unread emails
  subjectFilter String? // Optional subject filter (regex)
  fromFilter String? // Optional sender filter (regex)
  
  // Default ticket settings for emails from this account
  defaultPriority String? // Default priority for tickets from this email
  defaultStatus   String? // Default status for tickets from this email
  defaultAssigneeId String? // Default assignee for tickets from this email (always null)
  
  // Auto-sync settings
  enableAutoSync Boolean @default(true) // Enable automatic background sync
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_configurations")
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // "ticket_assigned", "ticket_unassigned", "comment_added"
  title     String   // Notification title
  message   String   @db.Text // Notification message
  ticketId  String?  // Related ticket ID
  commentId String?  // Related comment ID (if applicable)
  userId    String   // User who should receive the notification
  actorId   String?  // User who triggered the notification (optional for external users)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  actor   User?    @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  ticket  Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  type        String   // "ticket_created", "status_changed", "comment_added", "participant_added"
  name        String   // Display name for the template
  subject     String   @db.Text // Email subject with variables
  htmlContent String   @db.Text // HTML email content with variables
  textContent String?  @db.Text // Plain text fallback (optional)
  isDefault   Boolean  @default(false) // Mark as default system template
  isActive    Boolean  @default(true) // Enable/disable template
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([type, isDefault]) // Only one default template per type
  @@map("email_templates")
}

model EmailTypeConfig {
  id            String   @id @default(cuid())
  type          String   @unique // "ticket_created", "status_changed", etc.
  headerTitle   String   @default("{{systemName}}")
  headerSubtitle String  @default("Notification")
  headerColor   String   @default("#2563eb")
  greeting      String   @default("Hello {{customerName}},")
  introText     String   @db.Text
  footerText    String   @db.Text
  sections      String   @db.Text // JSON array of content sections
  actionButton  String?  @db.Text // JSON object for action button config
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("email_type_configs")
}
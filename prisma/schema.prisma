// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPPORTER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String?
  role      UserRole @default(SUPPORTER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedTickets Ticket[] @relation("AssignedTo")
  comments        Comment[]
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Ticket {
  id          String       @id @default(cuid())
  subject     String
  description String       @db.Text
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  fromEmail   String
  fromName    String?
  assignedToId String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  assignedTo User?     @relation("AssignedTo", fields: [assignedToId], references: [id])
  comments   Comment[]

  @@map("tickets")
}

model Comment {
  id       String   @id @default(cuid())
  content  String   @db.Text
  type     String   @default("internal") // 'internal' oder 'external'
  ticketId String
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("comments")
}

model SetupStatus {
  id          String  @id @default("setup")
  isCompleted Boolean @default(false)
  completedAt DateTime?

  @@map("setup_status")
}

model SystemSettings {
  id          String @id @default("system")
  appName     String @default("Support Dashboard")
  slogan      String? // Optional slogan/subtitle
  logoUrl     String? // Optional logo URL
  hideAppName Boolean @default(false) // Hide app name when logo is present
  themeColor  String @default("default") // default, blue, amber, green, red, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}